[{"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\reportWebVitals.js":"1","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\utils\\api.js":"2","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\App.js":"3","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\contexts\\CurrentUserContext.js":"4","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\Main.js":"5","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\Card.js":"6","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\EditAvatarPopup.js":"7","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\PopupWithForm.js":"8","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\PopupWithImage.js":"9","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\PopupHTML.js":"10","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\AddCardPopup.js":"11","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\EditProfilePopup.js":"12"},{"size":362,"mtime":1608042488705,"results":"13","hashOfConfig":"14"},{"size":3442,"mtime":1608115945801,"results":"15","hashOfConfig":"14"},{"size":7477,"mtime":1608369378496,"results":"16","hashOfConfig":"14"},{"size":86,"mtime":1608044409769,"results":"17","hashOfConfig":"14"},{"size":1529,"mtime":1608102039803,"results":"18","hashOfConfig":"14"},{"size":1317,"mtime":1608108229282,"results":"19","hashOfConfig":"14"},{"size":1113,"mtime":1608100449068,"results":"20","hashOfConfig":"14"},{"size":751,"mtime":1608098876879,"results":"21","hashOfConfig":"14"},{"size":521,"mtime":1608106667845,"results":"22","hashOfConfig":"14"},{"size":1888,"mtime":1608116467492,"results":"23","hashOfConfig":"14"},{"size":1234,"mtime":1608100022945,"results":"24","hashOfConfig":"14"},{"size":1569,"mtime":1608098754811,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nh88jo",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\reportWebVitals.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\utils\\api.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\App.js",["52"],"import React from 'react';\nimport Header from './Header.js';\nimport Main from './Main.js';\nimport Footer from './Footer.js';\nimport PopupWithForm from './PopupWithForm.js';\nimport PopupWithImage from './PopupWithImage.js';\nimport EditProfilePopup from './EditProfilePopup.js';\nimport EditAvatarPopup from './EditAvatarPopup.js';\nimport AddCardPopup from './AddCardPopup.js';\nimport { api } from '../utils/api.js';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\n\n\nfunction App() {\n   // Устанавливаем стэйты\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isDelCardPopupOpen, setIsDelCardPopupOpen] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState({});\n\n\n  const [cards, setCards] = React.useState([]);\n\n  // Используем хук для получения информации о юзере и карточки\n  React.useEffect(() => {\n    Promise.all([\n      api.getUserInfoFromServer(), //получаем данные о юзере\n      api.getInitialCards() // Получаем массив карточек\n    ])\n      .then((data) => {\n        const [userData, cardsData] = data;\n        setCurrentUser(userData); //меняем состояние\n        setCards(cardsData); //меняем состояние\n      })\n      .catch((err) => { api.setErrorServer(err); });\n  }, []);\n\n  // Обработчик клика по лайку\n  function handleCardLike(card) {\n    // Проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(like => like._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(card, isLiked)\n      .then((newCard) => {\n        // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n        const newCards = cards.map((c) => c._id === card._id ? newCard : c);\n        setCards(newCards);  // Обновляем стейт\n      })\n      .catch((err) => { api.setErrorServer(err); });\n  }\n\n  // Обработчик кнопки удаления карточки\n  function handleCardDelete(card) {\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.deleteCardToServer(card)\n      .then(() => {\n        // Формируем новый массив на основе имеющегося, если ИД совпадает с ИД \n        // удаляемой карточки, то она не должна попасть в новый массив\n        const newCards = cards.filter((c) => c._id !== card._id && c);\n        setCards(newCards);  // Обновляем стейт\n      })\n      .catch((err) => { api.setErrorServer(err); });\n  }\n\n  // Обработчик кнопки Сохранить в попапе редактирования профиля\n  function handleUpdateUser(inputValues) {\n    api.saveUserInfoToServer(inputValues)   // Сохраняем на сервере\n      .then((userData) => { \n        closeAllPopups()\n        setCurrentUser(userData) \n      }) // устанавливаем новый стэйт: новые данные пользователя\n      .catch((err) => { \n        api.setErrorServer(err); \n      })\n  }\n\n  // Обработчик кнопки Сохранить в попапе редактирования аватара\n  function handleUpdateAvatar(avatar) {\n    api.saveAvatarToServer(avatar)   // Сохраняем на сервере\n      .then((userData) => { \n        setCurrentUser(userData) \n        closeAllPopups()\n      }) // устанавливаем новый стэйт: новый аватар\n      .catch((err) => { \n        api.setErrorServer(err); \n      })\n  }\n\n  // Обработчик кнопки Создать в попапе добавления карточки\n  function handleAddPlace(newCard) {\n    api.saveCardToServer(newCard)   // Сохраняем на сервере\n      .then((newCard) => { \n        setCards([newCard, ...cards]) \n        closeAllPopups()\n      }) // Обновляем массив с карточками, добавляем загруженную\n      .catch((err) => { api.setErrorServer(err); })\n  }\n\n  // Обработчики открытия попапов\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  // Обработчик закрытия попапов\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard({});\n  }\n\n  return (\n    // Делаем доступным контекст currentUser\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header />\n\n        {/*Создаем компонент Main и передаем обработчики через пропсы*/}\n        <Main\n          onEditProfile={handleEditProfileClick}\n          onEditAvatar={handleEditAvatarClick}\n          onAddPlace={handleAddPlaceClick}\n          onCardClick={handleCardClick} // Обработчик клика по карточке\n          cards={cards}\n          onCardLike={handleCardLike}\n          onCardDelete={handleCardDelete}\n        />\n\n        <Footer />\n\n        {/*Создаем попап для аватара и передаем пропсы и обработчики*/}\n        <EditAvatarPopup\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar}\n        />\n\n        {/*Создаем попап для профиля и передаем пропсы и обработчики*/}\n        <EditProfilePopup\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser}\n        />\n\n        {/*Создаем попап для новой карточки и передаем пропсы и обработчики*/}\n        <AddCardPopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlace}\n        />\n\n        {/*Создаем попап для подтверждения удаления карточки и передаем пропсы и обработчики*/}\n        <PopupWithForm\n          name=\"confirm-delete\"\n          title=\"Вы уверены?\"\n          btnName=\"Да\"\n          isOpen={isDelCardPopupOpen}\n          onClose={closeAllPopups}\n        >\n        </PopupWithForm>\n\n        {/*Создаем попап с картинкой и передаем пропсы и обработчики*/}\n        <PopupWithImage\n          card={selectedCard}\n          onClose={closeAllPopups}\n        />\n\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\contexts\\CurrentUserContext.js",[],["53","54"],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\Main.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\Card.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\EditAvatarPopup.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\PopupWithForm.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\PopupWithImage.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\PopupHTML.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\AddCardPopup.js",[],"C:\\Users\\1\\Desktop\\dev\\mesto-react\\src\\components\\EditProfilePopup.js",[],{"ruleId":"55","severity":1,"message":"56","line":21,"column":30,"nodeType":"57","messageId":"58","endLine":21,"endColumn":51},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},"no-unused-vars","'setIsDelCardPopupOpen' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-global-assign","no-unsafe-negation"]